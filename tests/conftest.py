import json

import pandas as pd
import pytest


@pytest.fixture()
def test_operations():
    df = pd.DataFrame(
        {
            "Дата операции": ["31.12.2021  16:44:00", "31.12.2021  16:42:04"],
            "Дата платежа": ["31.12.2021", "31.12.2021"],
            "Номер карты": ["*7197", "*7197"],
            "Статус": ["OK", "OK"],
            "Сумма операции": [-160.89, -64],
            "Валюта операции": ["RUB", "RUB"],
            "Сумма платежа": [-160.89, -64],
            "Валюта платежа": ["RUB", "RUB"],
            "Кэшбэк": ["", ""],
            "Категория": ["Супермаркеты", "Супермаркеты"],
            "МСС": ["5411", "5411"],
            "Описание": ["Колхоз", "Колхоз"],
            "Бонусы (включая кэшбэк)": ["3", "1"],
            "Округление на инвесткопилку": ["0", "0"],
            "Сумма операции с округлением": ["160,89", "64"],
        }
    )
    return df


@pytest.fixture()
def empty_df():
    em_df = pd.DataFrame(
        {
            "Дата операции": [],
            "Дата платежа": [],
            "Номер карты": [],
            "Статус": [],
            "Сумма операции": [],
            "Валюта операции": [],
            "Сумма платежа": [],
            "Валюта платежа": [],
            "Кэшбэк": [],
            "Категория": [],
            "МСС": [],
            "Описание": [],
            "Бонусы (включая кэшбэк)": [],
            "Округление на инвесткопилку": [],
            "Сумма операции с округлением": [],
        }
    )
    return em_df


@pytest.fixture()
def top_5():
    df = pd.DataFrame(
        {
            "Дата операции": [
                "31.12.2021  16:44:00",
                "31.12.2021  16:42:04",
                "31.12.2020  16:42:04",
                "31.12.2019  16:42:04",
                "31.12.2018  16:42:04",
            ],
            "Дата платежа": ["31.12.2021", "31.12.2021", "31.12.2020", "31.12.2019", "31.12.2018"],
            "Номер карты": ["*7197", "*7197", "*7851", "*7851", "*4521"],
            "Статус": ["OK", "OK", "OK", "OK", "OK"],
            "Сумма операции": ["-160.89", "-64", "-4575.45", "-17000", "-5.05"],
            "Валюта операции": ["RUB", "RUB", "RUB", "RUB", "RUB"],
            "Сумма платежа": ["-160.89", "-64", "-4575.45", "-17000", "-5.05"],
            "Валюта платежа": ["RUB", "RUB", "RUB", "RUB", "RUB"],
            "Кэшбэк": ["", "", "", "", ""],
            "Категория": ["Супермаркеты", "Супермаркеты", "Фастфуд", "Услуги банка", "Переводы"],
            "МСС": ["5411", "5411", "5411", "5411", "5411"],
            "Описание": ["Колхоз", "Колхоз", "Колхоз", "Колхоз", "Колхоз"],
            "Бонусы (включая кэшбэк)": ["3", "1", "", "", ""],
            "Округление на инвесткопилку": ["0", "0", "0", "0", "0"],
            "Сумма операции с округлением": ["160,89", "64", "4575.75", "17000", "5.05"],
        }
    )
    return df


@pytest.fixture()
def moex_response():
    response = {
        "aggregates": {
            "metadata": {
                "market_name": {"type": "string", "bytes": 45, "max_size": 0},
                "market_title": {"type": "string", "bytes": 765, "max_size": 0},
                "engine": {"type": "string", "bytes": 45, "max_size": 0},
                "tradedate": {"type": "date", "bytes": 10, "max_size": 0},
                "secid": {"type": "string", "bytes": 36, "max_size": 0},
                "value": {"type": "double"},
                "volume": {"type": "int64"},
                "numtrades": {"type": "int64"},
                "updated_at": {"type": "datetime", "bytes": 19, "max_size": 0},
            },
            "columns": [
                "market_name",
                "market_title",
                "engine",
                "tradedate",
                "secid",
                "value",
                "volume",
                "numtrades",
                "updated_at",
            ],
            "data": [
                ["shares", "Рынок акций", "stock", "2024 - 08 - 08", "YDEX", 20, 5, 132682, "2024-08-09 00:08:05"],
                [
                    "ndm",
                    "Режим переговорных сделок",
                    "stock",
                    "2024 - 08 - 08",
                    "YDEX",
                    238948.0,
                    62,
                    2,
                    "2024 - 08 - 09 00: 08: 05",
                ],
                [
                    "ccp",
                    "РЕПО с ЦК",
                    "stock",
                    "2024-08-08",
                    "YDEX",
                    6716392432.71,
                    1785300,
                    8462,
                    "2024-08-09 00:08: 05",
                ],
                [
                    "repo",
                    "Рынок сделок РЕПО",
                    "stock",
                    "2024-08-08",
                    "YDEX",
                    6716392432.71,
                    1785300,
                    8462,
                    "2024-08-09 00:08: 05",
                ],
            ],
        },
        "agregates.dates": {
            "metadata": {
                "from": {"type": "date", "bytes": 30, "max_size": 0},
                "till": {"type": "date", "bytes": 30, "max_size": 0},
            },
            "columns": ["from", "till"],
            "data": [["2024 - 05 - 14", "2024 - 08 - 09"]],
        },
    }
    return response


@pytest.fixture
def trans_for_services():
    return [
        {
            "Дата операции": "31.12.2021 16:44:00",
            "Дата платежа": "31.12.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": -160.89,
            "Валюта операции": "RUB",
            "Сумма платежа": -160.89,
            "Валюта платежа": "RUB",
            "Кэшбэк": None,
            "Категория": "Супермаркеты",
            "MCC": 5411.0,
            "Описание": "Колхоз",
            "Бонусы (включая кэшбэк)": 3.0,
            "Округление на инвесткопилку": 0.0,
            "Сумма операции с округлением": 160.89,
        },
        {
            "Дата операции": "31.12.2021 16:42:04",
            "Дата платежа": "31.12.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": -64.0,
            "Валюта операции": "RUB",
            "Сумма платежа": -64.0,
            "Валюта платежа": "RUB",
            "Кэшбэк": None,
            "Категория": "Супермаркеты",
            "MCC": 5411.0,
            "Описание": "Колхоз",
            "Бонусы (включая кэшбэк)": 1.0,
            "Округление на инвесткопилку": 0.0,
            "Сумма операции с округлением": 64.0,
        },
        {
            "Дата операции": "31.12.2021 16:39:04",
            "Дата платежа": "31.12.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": -118.12,
            "Валюта операции": "RUB",
            "Сумма платежа": -118.12,
            "Валюта платежа": "RUB",
            "Кэшбэк": None,
            "Категория": "Супермаркеты",
            "MCC": 5411.0,
            "Описание": "Магнит",
            "Бонусы (включая кэшбэк)": 2.0,
            "Округление на инвесткопилку": 0.0,
            "Сумма операции с округлением": 118.12,
        },
        {
            "Дата операции": "31.12.2021 15:44:39",
            "Дата платежа": "31.12.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": -78.05,
            "Валюта операции": "RUB",
            "Сумма платежа": -78.05,
            "Валюта платежа": "RUB",
            "Кэшбэк": None,
            "Категория": "Супермаркеты",
            "MCC": 5411.0,
            "Описание": "Колхоз",
            "Бонусы (включая кэшбэк)": 1.0,
            "Округление на инвесткопилку": 0.0,
            "Сумма операции с округлением": 78.05,
        },
        {
            "Дата операции": "31.12.2021 01:23:42",
            "Дата платежа": "31.12.2021",
            "Номер карты": "*5091",
            "Статус": "OK",
            "Сумма операции": -564.0,
            "Валюта операции": "RUB",
            "Сумма платежа": -564.0,
            "Валюта платежа": "RUB",
            "Кэшбэк": None,
            "Категория": "Различные товары",
            "MCC": 5399.0,
            "Описание": "Ozon.ru",
            "Бонусы (включая кэшбэк)": 5.0,
            "Округление на инвесткопилку": 0.0,
            "Сумма операции с округлением": 564.0,
        },
        {
            "Дата операции": "31.12.2021 00:12:53",
            "Дата платежа": "31.12.2021",
            "Номер карты": None,
            "Статус": "OK",
            "Сумма операции": -800.0,
            "Валюта операции": "RUB",
            "Сумма платежа": -800.0,
            "Валюта платежа": "RUB",
            "Кэшбэк": None,
            "Категория": "Переводы",
            "MCC": None,
            "Описание": "Константин Л.",
            "Бонусы (включая кэшбэк)": 0.0,
            "Округление на инвесткопилку": 0.0,
            "Сумма операции с округлением": 800.0,
        },
        {
            "Дата операции": "30.12.2021 22:22:03",
            "Дата платежа": "31.12.2021",
            "Номер карты": None,
            "Статус": "OK",
            "Сумма операции": -20000.0,
            "Валюта операции": "RUB",
            "Сумма платежа": -20000.0,
            "Валюта платежа": "RUB",
            "Кэшбэк": None,
            "Категория": "Переводы",
            "MCC": None,
            "Описание": "Константин Л.",
            "Бонусы (включая кэшбэк)": 0.0,
            "Округление на инвесткопилку": 0.0,
            "Сумма операции с округлением": 20000.0,
        },
        {
            "Дата операции": "30.12.2021 19:18:22",
            "Дата платежа": "31.12.2021",
            "Номер карты": "*5091",
            "Статус": "OK",
            "Сумма операции": -7.07,
            "Валюта операции": "RUB",
            "Сумма платежа": -7.07,
            "Валюта платежа": "RUB",
            "Кэшбэк": None,
            "Категория": "Каршеринг",
            "MCC": 7512.0,
            "Описание": "Ситидрайв",
            "Бонусы (включая кэшбэк)": 0.0,
            "Округление на инвесткопилку": 0.0,
            "Сумма операции с округлением": 7.07,
        },
        {
            "Дата операции": "30.12.2021 19:06:39",
            "Дата платежа": "31.12.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": -1.32,
            "Валюта операции": "RUB",
            "Сумма платежа": -1.32,
            "Валюта платежа": "RUB",
            "Кэшбэк": None,
            "Категория": "Каршеринг",
            "MCC": 7512.0,
            "Описание": "Ситидрайв",
            "Бонусы (включая кэшбэк)": 0.0,
            "Округление на инвесткопилку": 0.0,
            "Сумма операции с округлением": 1.32,
        },
        {
            "Дата операции": "30.12.2021 17:50:30",
            "Дата платежа": "30.12.2021",
            "Номер карты": "*4556",
            "Статус": "OK",
            "Сумма операции": 5046.0,
            "Валюта операции": "RUB",
            "Сумма платежа": 5046.0,
            "Валюта платежа": "RUB",
            "Кэшбэк": None,
            "Категория": "Пополнения",
            "MCC": None,
            "Описание": "Пополнение через Газпромбанк",
            "Бонусы (включая кэшбэк)": 0.0,
            "Округление на инвесткопилку": 0.0,
            "Сумма операции с округлением": 5046.0,
        },
    ]


@pytest.fixture()
def transactions_df():
    df = pd.DataFrame(
        {
            "Дата платежа": ["01.08.2024", "19.07.2024", "20.06.2024", "31.12.2019", "31.12.2018"],
            "Сумма операции": ["-160.89", "-64.0", "-4575.45", "-17000.0", "-5.05"],
            "Категория": ["Супермаркеты", "Супермаркеты", "Фастфуд", "Супермаркеты", "Переводы"],
        }
    )
    return df


@pytest.fixture()
def transactions_df_test():
    df = pd.DataFrame(
        {
            "Дата платежа": ["01.08.2024", "19.07.2024", "20.06.2024", "31.12.2019", "31.12.2018"],
            "Сумма операции": ["-160.89", "-64.0", "-4575.45", "-17000.0", "-5.05"],
            "Категория": ["Супермаркеты", "Супермаркеты", "Фастфуд", "Ж/Д билеты", "Переводы"],
        }
    )
    return df


@pytest.fixture()
def transactions_df_test_1():
    df = pd.DataFrame(
        {
            "Дата операции": [
                "01.08.2024 18:00:00",
                "19.07.2024 05:00:00",
                "20.06.2024 16:00:00",
                "31.12.2019 07:00:00",
                "31.12.2018 08:00:00",
            ],
            "Сумма операции": ["-160.89", "-64.0", "-4575.45", "-17000.0", "-5.05"],
            "Категория": ["Супермаркеты", "Супермаркеты", "Фастфуд", "Ж/Д билеты", "Переводы"],
        }
    )
    return df


@pytest.fixture()
def json_response():
    response = json.dumps(
        {
            "greeting": "Доброй ночи",
            "cards": [{"last digits": "*7777", "total_spent": 88888.01, "cashback": 88.88}],
            "top_transactions": [
                {
                    "date": "2024.05.02 05:02:00",
                    "amount": 17000,
                    "category": "Супермаркеты",
                    "description": "Выброшенные на ветер деньги",
                }
            ],
            "currency_rates": [{"currency": "USD", "price": 22}],
            "stock_prices": [{"stock": "MOEX", "price": 111.11}],
        },
        ensure_ascii=False,
    )
    return response
